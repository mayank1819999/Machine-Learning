import numpy as np
from matplotlib import pyplot as plt
from sklearn.datasets import make_blobs

#generate random data 
X,y = make_blobs(n_samples=500, centers = 5)
print X.shape,y.shape

plt.figure(0)
plt.grid("on")
plt.scatter(X[:,0], X[:,1])
plt.show()

# no. of different clusters
k = 5
#label assigned to each group
colors = ['green','red','blue','yellow','orange','pink']

clusters = {}
#create  k random centres and assign colors/labels to them
for kx in range(k):
    centre = 10.0*(2*np.random.random((X.shape[1],)) -1)
    points = []
    cluster = {
        
        'centre' : centre,
        'points' : points,
        'color' : colors[kx]
    }
    clusters[kx] = cluster    
print clusters

# function for eucledian distance
def distance(v1,v2):
    return np.sqrt(np.sum((v1-v2)**2))
    
#Now compute distance of each point from every class and assign that point to nearest class
#we can  repeat this function until convergence


# Assign every data point to one of the clusters
def assignPointToClusters(clusters): #E-Step
    for ix in range(X.shape[0]):
        dist = []
        curr_x = X[ix]

        for kx in range(k):
            d = distance(curr_x,clusters[kx]['center'])
            dist.append(d)

        current_cluster = np.argmin(dist)    
        clusters[current_cluster]['points'].append(curr_x)
        
def updateClusters(clusters): # M-Step -> We update every cluster center according to the mean of the points in it
    for kx in range(k):
        pts = np.array(clusters[kx]['points'])
        
        if pts.shape[0]>0: #If a cluster has some-nonzero points
            new_u = pts.mean(axis=0)
            clusters[kx]['center'] = new_u
            clusters[kx]['points'] = [] #Clear the list 
                    
    

def plotClusters(clusters):
    
    for kx in range(k):
        #print(len(clusters[kx]['points']))
        
        pts = np.array(clusters[kx]['points'])
        #print(pts.shape)
        
        #Plot the points
        try:
            plt.scatter(pts[:,0],pts[:,1],color=clusters[kx]['color'])
        except:
            pass
        
        #Plot the cluster center
        uk = clusters[kx]['center']
        plt.scatter(uk[0],uk[1],color="black",marker="*")
# Repeat this  few times or put it inside a loop
assignPointToClusters(clusters)
plotClusters(clusters)
updateClusters(clusters)
    
