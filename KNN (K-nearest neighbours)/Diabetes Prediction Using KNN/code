#import libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#import dataset


dfx = pd.read_csv('C:/Users/MAYANK/Desktop/New folder/Diabetes_Xtest.csv')
dfy = pd.read_csv('C:/Users/MAYANK/Desktop/New folder/Diabetes_Xtest.csv')
dfxt= pd.read_csv('C:/Users/MAYANK/Desktop/New folder/Diabetes_Xtest.csv')

#Extract values from dataframe

X = dfx.values
Y = dfy.values
xt= dfxt.values
X = X[:,1:]
Y = Y[:,1:].reshape((-1,))
xt= xt[:,1:]


#function to compute eucledian distance between any 2 data points

def dist(x1,x2):
    return np.sqrt(sum((x1-x2)**2))

# Test Time 
def knn(X,Y,queryPoint,k=5):
    
    vals = []
    m = X.shape[0]
    #iterate over each row and compute its distance from over test point
    
    for i in range(m):
        d = dist(queryPoint,X[i])
        #append distance obtained and the class of data point to list
        vals.append((d,Y[i]))
        
    #sort on basis of distance
    vals = sorted(vals)
    # Nearest/First K points
    vals = vals[:k]
    
    vals = np.array(vals) 
    #obtain count of each unique class in top k vals
    new_vals = np.unique(vals[:,1],return_counts=True)
    #get index of class with highest count
    index = new_vals[1].argmax()
    #predict the class based on obtained index
    
    pred = new_vals[0][index]  
    return pred
#now time to make predictions for xtest
#declare empty list
ansl=[]
for t in xts:
   p=knn(X,Y,t,11)
   #store all predictions in list
   ansl.append(p)
convert list into numpy array
ansl=np.array(ansl)
filename='answer.csv'
with open(filename,'w',encode='utf-8') as f:
    header_string='y'
    header_string+='\n'
    f.write(header_string)
    
